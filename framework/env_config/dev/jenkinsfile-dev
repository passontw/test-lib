pipeline {
  agent {
    kubernetes {
      inheritFrom 'go base'
      containerTemplate {
        name 'go'
        image 'golang:1.22'
      }

    }

  }
  stages {
    stage('拉取源代码') {
      agent none
      steps {
        sh 'git config --global http.sslVerify false'
        checkout([$class: 'GitSCM', branches: [[name: '$GIT_BRANCH']], doGenerateSubmoduleConfigurations: false, extensions: [[
                                                                                                                                                                                                                                                                                  $class: 'SubmoduleOption',
                                                                                                                                                                                                                                                                                  disableSubmodules: false,
                                                                                                                                                                                                                                                                                  parentCredentials: true,
                                                                                                                                                                                                                                                                                  recursiveSubmodules: true,
                                                                                                                                                                                                                                                                                  reference: '',
                                                                                                                                                                                                                                                                                  trackingSubmodules: false
                                                                                                                                                                                                                                                                        ]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git-id', url: '$GIT_URL']]])
        }
      }

      stage('编译') {
        agent none
        steps {
          container('go') {
            sh '''ls -alh *
go mod tidy
go build -buildvcs=false
ls -alh *'''
          }

        }
      }

      stage('构建并推送镜像') {
        agent none
        steps {
          script {
            env.TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d%H%M%S').trim()
            env.DOCKER_TAG = "${TIMESTAMP}-${BUILD_NUMBER}"
          }

          container('base') {
            sh 'podman build -f ./Dockerfile -t $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG .'
            withCredentials([usernamePassword(credentialsId : 'harbor-id' ,passwordVariable : 'DOCKER_PASSWORD' ,usernameVariable : 'DOCKER_USERNAME' ,)]) {
              //sh 'podman logout $REGISTRY'
              sh 'echo "$DOCKER_PASSWORD" | podman login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
              sh 'podman push $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG'
            }

          }

        }
      }

      stage('部署至 dev 环境') {
        agent none
        steps {
          container('base') {
            sh '''cat > deployment.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $APP_NAME
  namespace: $NAMESPACE
  labels:
    app: $APP_NAME
spec:
  replicas: $POD_REPLICAS
  selector:
    matchLabels:
      app: $APP_NAME
  template:
    metadata:
      labels:
        app: $APP_NAME
    spec:
      imagePullSecrets:
        - name: harbor-id
      containers:
        - name: $APP_NAME
          image: $REGISTRY/$PROJECT/$APP_NAME:$DOCKER_TAG
          ports:
            - name: tcp-8080
              containerPort: 8080
              protocol: TCP
            - name: tcp-8088
              containerPort: 8088
              protocol: TCP
          env:
            #nacos配置
            - name: REGISTER_HOST
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: REGISTER_HOST
            - name: NAMESPACE
              valueFrom:
                secretKeyRef:
                  name: nacos
                  key: NAMESPACE

            #uid 数据库链接
            - name: UID_HOST
              valueFrom:
                secretKeyRef:
                  name: db
                  key: UID_HOST
            - name: UID_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db
                  key: UID_DATABASE
            - name: UID_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db
                  key: UID_USERNAME
            - name: UID_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db
                  key: UID_PASSWORD
            # redis 配置
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASSWORD
            - name: REDIS_DATABASE
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_DATABASE
            # MQ 配置
            - name: MQ_NAMESERVER
              valueFrom:
                secretKeyRef:
                  name: rocket-mq
                  key: MQ_NAMESERVER

            # encyrpt 配置
            - name: ENCYRPT_SALT
              valueFrom:
                secretKeyRef:
                  name: encyrpt-salt
                  key: ENCYRPT_SALT

          #探针检测
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8088
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 5
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8088
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 5
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: $APP_NAME
    micrometer-prometheus-discovery: 'true'
  name: $APP_NAME-svc
  namespace: $NAMESPACE
spec:
  ports:
    - name: tcp-8080
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: $NODE_PORT
    - name: metrics
      protocol: TCP
      port: 8088
      targetPort: 8088
      nodePort: $METRICS_PORT
  selector:
    app: $APP_NAME
  type: NodePort

EOF'''
            sh 'cat deployment.yaml '
            sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
            sh 'install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl'
            withCredentials([kubeconfigContent(credentialsId : 'kubeconfig-id' ,variable : 'KUBECONFIG' ,)]) {
              sh '''
              set +x
              mkdir ~/.kube
              echo "$KUBECONFIG" > ~/.kube/config
            '''
            }

            sh 'kubectl cluster-info'
            sh 'kubectl apply -f deployment.yaml'
          }

        }
      }

    }
  }